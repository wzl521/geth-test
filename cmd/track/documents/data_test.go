package documents

import (
	"encoding/base64"
	"github.com/ethereum/go-ethereum/track"
	"go.mongodb.org/mongo-driver/bson"
	"testing"
	"time"
)

func TestMarshalMainnetTrack(t *testing.T) {
	track := MainnetPeerTrack{
		Inbound:  []map[string]bool{},
		Outbound: []map[string]bool{},
		MainnetPeerMessage: track.MainnetPeerMessage{
			Timestamp: time.Now().UnixMilli(),
			Type:      1,
			Info: track.PeerInfo{
				ENR:   "ENR",
				Enode: "ENODE",
				ID:    "b70c6fb4aec7072dff3ba2265031c1ef812ef4088ae0a801287651fc742ac3c1",
				Name:  "Geth/v1.10.16-stable-20356e57/linux-amd64/go1.17.3",
				Caps: []string{
					"eth/66", "snap/1",
				},
				Network: struct {
					LocalAddress  string `json:"localAddress" bson:"-"`
					RemoteAddress string `json:"remoteAddress" bson:"remote_address"`
					Inbound       bool   `json:"inbound" bson:"-"`
					Trusted       bool   `json:"trusted" bson:"trusted"`
					Static        bool   `json:"static" bson:"static"`
				}{
					RemoteAddress: "34.138.224.108:29888",
					Trusted:       true, Static: true,
				},
				Protocols: nil,
			},
			IP:  "34.138.224.108",
			TCP: 30303,
			UDP: 30303,
		},
	}
	by, _ := bson.Marshal(track)
	t.Logf("track: %s", string(by))

}

func TestUnmarshalMainnetTrack(t *testing.T) {
	b64 := `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`

	mnTrack := MainnetPeerTrack{}

	by, _ := base64.StdEncoding.DecodeString(b64)

	if err := bson.Unmarshal(by, &mnTrack); err != nil {
		t.Error(err)
	} else {
		t.Logf("mnTrack: %#v", mnTrack)
	}

}
